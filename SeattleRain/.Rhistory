week1_sleep_workdays
char_vector
## Create a character vector with the values of "three", "two", "one" "using the `c()` function
## Assign the value to a variable named `char_vector`
## Print the vector
char_vector <- c('three', 'two', 'one')
## Create a numeric vector with the values of 3, 2, 1 using the `c()` function
## Assign the value to a variable named `num_vector`
## Print the vector
num_vector <- c(3, 2, 1)
num_vector
char_vector
## Display the amount of sleep on Tuesday of week 1 by selecting the variable index
week1_sleep[0]
week1_sleep <- (6.1, 8.8, 7.7, 6.4, 6.2, 6.9, 6.6)
## Display the amount of sleep on Tuesday of week 1 by selecting the variable index
week1_sleep[0]
## Create a vector called `week1_sleep` representing how many hours slept each night of the week
## Use the values 6.1, 8.8, 7.7, 6.4, 6.2, 6.9, 6.6
week1_sleep <- (6.1, 8.8, 7.7, 6.4, 6.2, 6.9, 6.6)
## Create a vector called `week1_sleep` representing how many hours slept each night of the week
## Use the values 6.1, 8.8, 7.7, 6.4, 6.2, 6.9, 6.6
week1_sleep <- c(6.1, 8.8, 7.7, 6.4, 6.2, 6.9, 6.6)
## Display the amount of sleep on Tuesday of week 1 by selecting the variable index
week1_sleep[0]
## Create a vector called `week1_sleep` representing how many hours slept each night of the week
## Use the values 6.1, 8.8, 7.7, 6.4, 6.2, 6.9, 6.6
week1_sleep <- c(6.1, 8.8, 7.7, 6.4, 6.2, 6.9, 6.6)
## Display the amount of sleep on Tuesday of week 1 by selecting the variable index
week1_sleep[0]
## Create a vector called `week1_sleep_weekdays`
## Assign the weekday values using indice slicing
week1_sleep_weekdays <- week1_sleep[0:] #TODO: check/fix this
## Create a vector called `week1_sleep` representing how many hours slept each night of the week
## Use the values 6.1, 8.8, 7.7, 6.4, 6.2, 6.9, 6.6
week1_sleep <- c(6.1, 8.8, 7.7, 6.4, 6.2, 6.9, 6.6)
## Display the amount of sleep on Tuesday of week 1 by selecting the variable index
week1_sleep[1]
## Create a vector called `week1_sleep_weekdays`
## Assign the weekday values using indice slicing
week1_sleep_weekdays <- week1_sleep[1:7] #TODO: check/fix this
week1_sleep_workdays
## Create a vector called `week1_sleep_weekdays`
## Assign the weekday values using indice slicing
week1_sleep_weekdays <- week1_sleep[c(1:7)] #TODO: check/fix this
week1_sleep_workdays
## Create a vector called `week1_sleep_weekdays`
## Assign the weekday values using indice slicing
week1_sleep_weekdays <- week1_sleep[1:7] #TODO: check/fix this
week1_sleep_weekdays
## Create a vector called `week1_sleep_weekdays`
## Assign the weekday values using indice slicing
week1_sleep_weekdays <- week1_sleep[c(1:7)] #TODO: check/fix this
week1_sleep_weekdays
## Create a numeric vector with the values of 3, 2, 1 using the `c()` function
## Assign the value to a variable named `num_vector`
## Print the vector
num_vector <- c(3, 2, 1)
num_vector
## Create a character vector with the values of "three", "two", "one" "using the `c()` function
## Assign the value to a variable named `char_vector`
## Print the vector
char_vector <- c('three', 'two', 'one')
char_vector
## Create a vector called `week1_sleep` representing how many hours slept each night of the week
## Use the values 6.1, 8.8, 7.7, 6.4, 6.2, 6.9, 6.6
week1_sleep <- c(6.1, 8.8, 7.7, 6.4, 6.2, 6.9, 6.6)
## Display the amount of sleep on Tuesday of week 1 by selecting the variable index
week1_sleep[0]
## Create a vector called `week1_sleep_weekdays`
## Assign the weekday values using indice slicing
week1_sleep_weekdays <- week1_sleep[0:] #TODO: check/fix this
## Display the amount of sleep on Tuesday of week 1 by selecting the variable index
week1_sleep[1]
## Create a vector called `week1_sleep_weekdays`
## Assign the weekday values using indice slicing
week1_sleep_weekdays <- week1_sleep[1:7] #TODO: check/fix this
week1_sleep_workdays
week1_sleep_weekdays
## Add the total hours slept in week one using the `sum` function
## Assign the value to variable `total_sleep_week1`
total_sleep_week1 <- sum(week1_sleep[1:7])
total_sleep_week1
## Create a vector called `week2_sleep` representing how many hours slept each night of the week
## Use the values 7.1, 7.4, 7.9, 6.5, 8.1, 8.2, 8.9
week2_sleep <- c(7.1, 7.4, 7.9, 6.5, 8.1, 8.2, 8.9)
## Add the total hours slept in week two using the sum function
## Assign the value to variable `total_sleep_week2`
total_sleep_week2 <- sum(week2_sleep)
total_sleep_week2
## Determine if the total sleep in week 1 is less than week 2 by using the < operator
week1_sleep < week2_sleep
## Determine if the total sleep in week 1 is less than week 2 by using the < operator
total_sleep_week1 < total_sleep_week2
## Calculate the mean hours slept in week 1 using the `mean()` function
mean(week1_sleep)
## Assign the names of each day to `week1_sleep` and `week2_sleep` using the `names` function and `days` vector
names(week1_sleep) <- days
## Create a vector called `days` containing the days of the week.
## Start with Sunday and end with Saturday
days <- c('Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday')
## Assign the names of each day to `week1_sleep` and `week2_sleep` using the `names` function and `days` vector
names(week1_sleep) <- days
names(week2_sleep) <- days
week1_sleep
week2_sleep
## Display the amount of sleep on Tuesday of week 1 by selecting the variable name
week1_sleep['Tuesday']
## Create vector called weekdays from the days vector
weekdays <- days[2:6]
weekdays
## Create vector called weekends containing Sunday and Saturday
weekends <- c(days[1], days[7])
weekends
## Calculate the mean about sleep on weekdays for each week
## Assign the values to weekdays1_mean and weekdays2_mean
weekdays1_mean <- mean(week1_sleep[weekdays])
weekdays2_mean <- mean(week2_sleep[weekdays])
weekdays1_mean
weekdays2_mean
## Using the weekdays1_mean and weekdays2_mean variables,
## see if weekdays1_mean is greater than weekdays2_mean using the `>` operator
weekdays1_mean > weekdays2_mean
## Determine how many days in week 1 had over 8 hours of sleep using the `>` operator
length(week1_sleep > 8)
## Determine how many days in week 1 had over 8 hours of sleep using the `>` operator
length(week1_sleep > 8 == "TRUE")
## Determine how many days in week 1 had over 8 hours of sleep using the `>` operator
sum(week1_sleep > 8)
## Create a matrix from the following three vectors
student01 <- c(100.0, 87.1)
student02 <- c(77.2, 88.9)
student03 <- c(66.3, 87.9)
students_combined <- c(student01, student02, student03)
grades <- matrix(students_combined, byrow = TRUE, nrow = 3)
grades
## Add a new student row with `rbind()`
student04 <- c(95.2, 94.1)
grades <- rbind(grades, student04)
grades
students_combined
names(students_combined) <- c('student01', 'student02', 'student03')
grades <- matrix(students_combined, byrow = TRUE, nrow = 3)
grades
students_combined
grades <- matrix(students_combined, byrow = TRUE, nrow = 3)
grades
## Add a new student row with `rbind()`
student04 <- c(95.2, 94.1)
grades <- rbind(grades, student04)
grades
grades <- rbind(grades, c(student04))
grades
grades <- matrix(students_combined, byrow = TRUE, nrow = 3)
grades
## Add a new student row with `rbind()`
student04 <- c(95.2, 94.1)
grades <- rbind(grades, c(student04))
grades
students_combined <- student01, student02, student03
students_combined <- c(student01, student02, student03)
students_combined
grades <- matrix(students_combined, byrow = TRUE, nrow = 3)
grades
## Add a new student row with `rbind()`
student04 <- c(95.2, 94.1)
grades <- rbind(grades, c(student04))
grades
## Add a new assignment column with `cbind()`
assignment04 <- c(92.1, 84.3, 75.1, 97.8)
grades <- cbind(grades, c(assignment04))
grades
## Add the following names to columns and rows using `rownames()` and `colnames()`
assignments <- c("Assignment 1", "Assignment 2", "Assignment 3")
students <- c("Florinda Baird", "Jinny Foss", "Lou Purvis", "Nola Maloney")
rownames(grades) <- students
colnames(grades) <- assignments
grades
## Total points for each assignment using `colSums()`
colSums(grades)
## Total points for each student using `rowSums()`
rowSums(grades)
## Matrix with 10% and add it to grades
weighted_grades <- grades * 0.1 + grades
## Create a factor of book genres using the genres_vector
## Assign the factor vector to factor_genre_vector
genres_vector <- c("Fantasy", "Sci-Fi", "Sci-Fi", "Mystery", "Sci-Fi", "Fantasy")
factor_genre_vector <- factor(genres_vector)
factor_genre_vector
## Use the `summary()` function to print a summary of `factor_genre_vector`
summary(factor_genre_vector)
## Create ordered factor of book recommendations using the recommendations_vector
## `no` is the lowest and `yes` is the highest
recommendations_vector <- c("neutral", "no", "no", "neutral", "yes")
factor_recommendations_vector <- factor(
recommendations_vector,
ordered = TRUE,
levels = c("no", "neutral", "yes")
)
## Use the `summary()` function to print a summary of `factor_recommendations_vector`
summary(factor_recommendations_vector)
## Using the built-in `mtcars` dataset, view the first few rows using the `head()` function
head(mtcars)
## Using the built-in mtcars dataset, view the last few rows using the `tail()` function
tail(mtcars)
## Create a dataframe called characters_df using the following information from LOTR
name <- c("Aragon", "Bilbo", "Frodo", "Galadriel", "Sam", "Gandalf", "Legolas", "Sauron", "Gollum")
race <- c("Men", "Hobbit", "Hobbit", "Elf", "Hobbit", "Maia", "Elf", "Maia", "Hobbit")
in_fellowship <- c(TRUE, FALSE, TRUE, FALSE, TRUE, TRUE, TRUE, FALSE, FALSE)
ring_bearer <- c(FALSE, TRUE, TRUE, FALSE, TRUE, TRUE, FALSE, TRUE, TRUE)
age <- c(88, 129, 51, 7000, 36, 2019, 2931, 7052, 589)
characters_df <- data.frame(name, race, in_fellowship, ring_bearer, age)
characters_df
## Sorting the characters_df by age using the order function and assign the result to the sorted_characters_df
sorted_characters_df <- characters_df[order(age),]
sorted_characters_df
## Use `head()` to output the first few rows of `sorted_characters_df`
head(sorted_characters_df)
## Select all of the ring bearers from the dataframe and assign it to ringbearers_df
ringbearers_df <- characters_df[characters_df$ring_bearer == TRUE,]
## Use `head()` to output the first few rows of `ringbearers_df`
head(ringbearers_df)
## Create a vector called `week1_sleep_weekdays`
## Assign the weekday values using indice slicing
week1_sleep_weekdays <- week1_sleep[2:6]
week1_sleep_weekdays
## Create a numeric vector with the values of 3, 2, 1 using the `c()` function
## Assign the value to a variable named `num_vector`
## Print the vector
num_vector <- c(3, 2, 1)
num_vector
## Create a character vector with the values of "three", "two", "one" "using the `c()` function
## Assign the value to a variable named `char_vector`
## Print the vector
char_vector <- c('three', 'two', 'one')
char_vector
## Create a vector called `week1_sleep` representing how many hours slept each night of the week
## Use the values 6.1, 8.8, 7.7, 6.4, 6.2, 6.9, 6.6
week1_sleep <- c(6.1, 8.8, 7.7, 6.4, 6.2, 6.9, 6.6)
## Display the amount of sleep on Tuesday of week 1 by selecting the variable index
week1_sleep[1]
## Create a vector called `week1_sleep_weekdays`
## Assign the weekday values using indice slicing
week1_sleep_weekdays <- week1_sleep[2:6]
week1_sleep_weekdays
## Add the total hours slept in week one using the `sum` function
## Assign the value to variable `total_sleep_week1`
total_sleep_week1 <- sum(week1_sleep[1:7])
total_sleep_week1
## Create a vector called `week2_sleep` representing how many hours slept each night of the week
## Use the values 7.1, 7.4, 7.9, 6.5, 8.1, 8.2, 8.9
week2_sleep <- c(7.1, 7.4, 7.9, 6.5, 8.1, 8.2, 8.9)
## Add the total hours slept in week two using the sum function
## Assign the value to variable `total_sleep_week2`
total_sleep_week2 <- sum(week2_sleep)
total_sleep_week2
## Determine if the total sleep in week 1 is less than week 2 by using the < operator
total_sleep_week1 < total_sleep_week2
## Calculate the mean hours slept in week 1 using the `mean()` function
mean(week1_sleep)
## Create a vector called `days` containing the days of the week.
## Start with Sunday and end with Saturday
days <- c('Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday')
## Assign the names of each day to `week1_sleep` and `week2_sleep` using the `names` function and `days` vector
names(week1_sleep) <- days
names(week2_sleep) <- days
week1_sleep
week2_sleep
## Display the amount of sleep on Tuesday of week 1 by selecting the variable name
week1_sleep['Tuesday']
## Create vector called weekdays from the days vector
weekdays <- days[2:6]
weekdays
## Create vector called weekends containing Sunday and Saturday
weekends <- c(days[1], days[7])
weekends
## Calculate the mean about sleep on weekdays for each week
## Assign the values to weekdays1_mean and weekdays2_mean
weekdays1_mean <- mean(week1_sleep[weekdays])
weekdays2_mean <- mean(week2_sleep[weekdays])
weekdays1_mean
weekdays2_mean
## Using the weekdays1_mean and weekdays2_mean variables,
## see if weekdays1_mean is greater than weekdays2_mean using the `>` operator
weekdays1_mean > weekdays2_mean
## Determine how many days in week 1 had over 8 hours of sleep using the `>` operator
sum(week1_sleep > 8)
## Create a matrix from the following three vectors
student01 <- c(100.0, 87.1)
student02 <- c(77.2, 88.9)
student03 <- c(66.3, 87.9)
students_combined <- c(student01, student02, student03)
students_combined
grades <- matrix(students_combined, byrow = TRUE, nrow = 3)
grades
## Add a new student row with `rbind()`
student04 <- c(95.2, 94.1)
grades <- rbind(grades, c(student04))
grades
## Add a new assignment column with `cbind()`
assignment04 <- c(92.1, 84.3, 75.1, 97.8)
grades <- cbind(grades, c(assignment04))
grades
## Add the following names to columns and rows using `rownames()` and `colnames()`
assignments <- c("Assignment 1", "Assignment 2", "Assignment 3")
students <- c("Florinda Baird", "Jinny Foss", "Lou Purvis", "Nola Maloney")
rownames(grades) <- students
colnames(grades) <- assignments
grades
## Total points for each assignment using `colSums()`
colSums(grades)
## Total points for each student using `rowSums()`
rowSums(grades)
## Matrix with 10% and add it to grades
weighted_grades <- grades * 0.1 + grades
## Create a factor of book genres using the genres_vector
## Assign the factor vector to factor_genre_vector
genres_vector <- c("Fantasy", "Sci-Fi", "Sci-Fi", "Mystery", "Sci-Fi", "Fantasy")
factor_genre_vector <- factor(genres_vector)
factor_genre_vector
## Use the `summary()` function to print a summary of `factor_genre_vector`
summary(factor_genre_vector)
## Create ordered factor of book recommendations using the recommendations_vector
## `no` is the lowest and `yes` is the highest
recommendations_vector <- c("neutral", "no", "no", "neutral", "yes")
factor_recommendations_vector <- factor(
recommendations_vector,
ordered = TRUE,
levels = c("no", "neutral", "yes")
)
## Use the `summary()` function to print a summary of `factor_recommendations_vector`
summary(factor_recommendations_vector)
## Using the built-in `mtcars` dataset, view the first few rows using the `head()` function
head(mtcars)
## Using the built-in mtcars dataset, view the last few rows using the `tail()` function
tail(mtcars)
## Create a dataframe called characters_df using the following information from LOTR
name <- c("Aragon", "Bilbo", "Frodo", "Galadriel", "Sam", "Gandalf", "Legolas", "Sauron", "Gollum")
race <- c("Men", "Hobbit", "Hobbit", "Elf", "Hobbit", "Maia", "Elf", "Maia", "Hobbit")
in_fellowship <- c(TRUE, FALSE, TRUE, FALSE, TRUE, TRUE, TRUE, FALSE, FALSE)
ring_bearer <- c(FALSE, TRUE, TRUE, FALSE, TRUE, TRUE, FALSE, TRUE, TRUE)
age <- c(88, 129, 51, 7000, 36, 2019, 2931, 7052, 589)
characters_df <- data.frame(name, race, in_fellowship, ring_bearer, age)
## Sorting the characters_df by age using the order function and assign the result to the sorted_characters_df
sorted_characters_df <- characters_df[order(age),]
## Use `head()` to output the first few rows of `sorted_characters_df`
head(sorted_characters_df)
## Select all of the ring bearers from the dataframe and assign it to ringbearers_df
ringbearers_df <- characters_df[characters_df$ring_bearer == TRUE,]
## Use `head()` to output the first few rows of `ringbearers_df`
head(ringbearers_df)
beds_df <-
r_squared <- r^2
beds_df
num_beds <- c(23,29,29,35,42,46,50,54,64,66,67,68)
ftes <- c(69,95,102,119,126,125,139,178,156,185,176,225)
beds_df <- data.frame(num_beds,ftes)
beds_df
num_beds <- c(23,29,29,35,42,46,50,54,64,66,67,68)
ftes <- c(69,95,102,119,126,125,139,178,156,185,176,225)
beds_df <- data.frame(num_beds,ftes)
r <- cor(beds_df)
r_squared <- r^2
r_squared
summary(beds_lm)$r.squared
num_beds <- c(23,29,29,35,42,46,50,54,64,66,67,68)
ftes <- c(69,95,102,119,126,125,139,178,156,185,176,225)
beds_df <- data.frame(num_beds,ftes)
beds_lm <- lm(ftes ~ num_beds, beds_df)
summary(beds_lm)$r.squared
r <- cor(beds_df)
r_squared <- r^2
r_squared
num_beds <- c(23,29,29,35,42,46,50,54,64,66,67,68)
ftes <- c(69,95,102,119,126,125,139,178,156,185,176,225)
beds_df <- data.frame(num_beds,ftes)
beds_lm <- lm(ftes ~ num_beds, beds_df)
summary(beds_lm)$r.squared
summary(beds_lm)
num_beds <- c(23,29,29,35,42,46,50,54,64,66,67,68)
ftes <- c(69,95,102,119,126,125,139,178,156,185,176,225)
beds_df <- data.frame(num_beds,ftes)
beds_lm <- lm(num_beds ~ ftes, beds_df)
summary(beds_lm)$r.squared
summary(beds_lm)
num_beds <- c(23,29,29,35,42,46,50,54,64,66,67,78)
ftes <- c(69,95,102,118,126,125,138,178,156,184,176,225)
beds_df <- data.frame(num_beds,ftes)
beds_lm <- lm(ftes ~ num_beds, beds_df)
summary(beds_lm)$r.squared
summary(beds_lm)
num_beds <- c(23,29,29,35,42,46,50,54,64,66,67,78)
ftes <- c(69,95,102,118,126,125,138,178,156,184,176,225)
beds_df <- data.frame(num_beds,ftes)
beds_lm <- lm(ftes ~ num_beds, beds_df)
summary(beds_lm)$r.squared
# Line graph: Date vs Precipitation
ggplot(data=weather_df, aes(DATE, PRCP))
# Load libraries
library(ggplot2)
# Load data
weather_df <- read.csv('seattleWeather_1948-2017.csv')
# Load data
getwd()
# Load data
getwd()
# Load data
setwd('/Documents/DataScience/DSC630/Project')
# Load data
setwd('/Documents/DataScience/DSC630/Project/')
# Load data
setwd('./Documents/DataScience/DSC630/Project/')
weather_df <- read.csv('seattleWeather_1948-2017.csv')
head(weather_df)
# Get weekday from date in new column
weather_df$DAY <- weekdays(as.Date(weather_df$DATE))
head(weather_df)
# Get week of year from date in new column
weather_df$WEEK <- strtoi(strftime(weather_df$DATE, format='%U')) + 1 # Switch to index 1, not 0
head(weather_df)
# Get month from date in new column
weather_df$MONTH <- months(as.Date(weather_df$DATE))
head(weather_df)
# Get day of month in new column
weather_df$DAY_OF_MONTH <- strtoi(format(as.Date(weather_df$DATE, format='%Y-%m-%d'), format='%d'))
head(weather_df)
# Get day of year in new column
weather_df$DAY_OF_YEAR <- strtoi(strftime(weather_df$DATE, format='%j'))
head(weather_df)
# Get summary statistics
summary(weather_df)
## HISTOGRAMS
rain_df <- weather_df[weather_df$RAIN == TRUE,]
head(rain_df)
norain_df <- weather_df[weather_df$RAIN == FALSE,]
head(norain_df)
# Min and Max days with rain
ggplot() +
geom_histogram(data=rain_df, aes(TMIN), col='red')
ggplot() +
geom_histogram(data=rain_df, aes(TMAX), col='blue')
# Min and Max days without rain
ggplot() +
geom_histogram(data=norain_df, aes(TMIN), col='red')
ggplot() +
geom_histogram(data=norain_df, aes(TMAX), col='blue')
# Date histograms: DAY_OF_MONTH, DAY_OF_YEAR, WEEK - with and without rain
ggplot() +
geom_histogram(data=rain_df, aes(DAY_OF_MONTH), col='red')
ggplot() +
geom_histogram(data=norain_df, aes(DAY_OF_MONTH), col='blue')
ggplot() +
geom_histogram(data=rain_df, aes(DAY_OF_YEAR), col='red')
ggplot() +
geom_histogram(data=norain_df, aes(DAY_OF_YEAR), col='blue')
ggplot() +
geom_histogram(data=rain_df, aes(WEEK), col='red')
ggplot() +
geom_histogram(data=norain_df, aes(WEEK), col='blue')
# Date bar charts: MONTH, DAY
month_order <- c('January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December')
ggplot() +
geom_bar(data=rain_df, aes(x=factor(MONTH, level=month_order)), col='red') +
coord_flip() +
xlab('MONTH')
ggplot() +
geom_bar(data=norain_df, aes(x=factor(MONTH, level=month_order)), col='blue') +
coord_flip() +
xlab('MONTH')
day_order <- c('Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday')
ggplot() +
geom_bar(data=rain_df, aes(x=factor(DAY, level=day_order)), col='red') +
coord_flip() +
xlab('DAY OF WEEK')
ggplot() +
geom_bar(data=norain_df, aes(x=factor(DAY, level=day_order)), col='blue') +
coord_flip() +
xlab('DAY OF WEEK')
# Line graph: Date vs Precipitation
ggplot(data=weather_df, aes(DATE, PRCP))
# Export new weather data frame to csv
write.csv('seattleWeather_new.csv', row.names=FALSE)
# Export new weather data frame to csv
write.csv('seattleWeather_new.csv', row.names=FALSE)
# Export new weather data frame to csv
write.csv(weather_df,'seattleWeather_new.csv', row.names=FALSE)
# Load data
setwd('./Documents/DataScience/DSC630/Project/')
# Load data
getwd()
weather_df <- read.csv('seattleWeather_1948-2017.csv')
head(weather_df)
# Get weekday from date in new column
weather_df$DAY <- weekdays(as.Date(weather_df$DATE))
head(weather_df)
# Get week of year from date in new column
weather_df$WEEK <- strtoi(strftime(weather_df$DATE, format='%U')) + 1 # Switch to index 1, not 0
head(weather_df)
# Get month from date in new column
weather_df$MONTH <- months(as.Date(weather_df$DATE))
head(weather_df)
# Get day of month in new column
weather_df$DAY_OF_MONTH <- strtoi(format(as.Date(weather_df$DATE, format='%Y-%m-%d'), format='%d'))
head(weather_df)
# Get day of year in new column
weather_df$DAY_OF_YEAR <- strtoi(strftime(weather_df$DATE, format='%j'))
head(weather_df)
# Get summary statistics
summary(weather_df)
tail(weather_df)
# Get summary statistics
summary(weather_df)
