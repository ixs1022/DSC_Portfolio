## Assign the value to a variable named `num_vector`
## Print the vector
num_vector <- c(3, 2, 1)
num_vector
## Create a character vector with the values of "three", "two", "one" "using the `c()` function
## Assign the value to a variable named `char_vector`
## Print the vector
char_vector <- c('three', 'two', 'one')
char_vector
## Create a vector called `week1_sleep` representing how many hours slept each night of the week
## Use the values 6.1, 8.8, 7.7, 6.4, 6.2, 6.9, 6.6
week1_sleep <- c(6.1, 8.8, 7.7, 6.4, 6.2, 6.9, 6.6)
## Display the amount of sleep on Tuesday of week 1 by selecting the variable index
week1_sleep[1]
## Create a vector called `week1_sleep_weekdays`
## Assign the weekday values using indice slicing
week1_sleep_weekdays <- week1_sleep[2:6]
week1_sleep_weekdays
## Add the total hours slept in week one using the `sum` function
## Assign the value to variable `total_sleep_week1`
total_sleep_week1 <- sum(week1_sleep[1:7])
total_sleep_week1
## Create a vector called `week2_sleep` representing how many hours slept each night of the week
## Use the values 7.1, 7.4, 7.9, 6.5, 8.1, 8.2, 8.9
week2_sleep <- c(7.1, 7.4, 7.9, 6.5, 8.1, 8.2, 8.9)
## Add the total hours slept in week two using the sum function
## Assign the value to variable `total_sleep_week2`
total_sleep_week2 <- sum(week2_sleep)
total_sleep_week2
## Determine if the total sleep in week 1 is less than week 2 by using the < operator
total_sleep_week1 < total_sleep_week2
## Calculate the mean hours slept in week 1 using the `mean()` function
mean(week1_sleep)
## Create a vector called `days` containing the days of the week.
## Start with Sunday and end with Saturday
days <- c('Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday')
## Assign the names of each day to `week1_sleep` and `week2_sleep` using the `names` function and `days` vector
names(week1_sleep) <- days
names(week2_sleep) <- days
week1_sleep
week2_sleep
## Display the amount of sleep on Tuesday of week 1 by selecting the variable name
week1_sleep['Tuesday']
## Create vector called weekdays from the days vector
weekdays <- days[2:6]
weekdays
## Create vector called weekends containing Sunday and Saturday
weekends <- c(days[1], days[7])
weekends
## Calculate the mean about sleep on weekdays for each week
## Assign the values to weekdays1_mean and weekdays2_mean
weekdays1_mean <- mean(week1_sleep[weekdays])
weekdays2_mean <- mean(week2_sleep[weekdays])
weekdays1_mean
weekdays2_mean
## Using the weekdays1_mean and weekdays2_mean variables,
## see if weekdays1_mean is greater than weekdays2_mean using the `>` operator
weekdays1_mean > weekdays2_mean
## Determine how many days in week 1 had over 8 hours of sleep using the `>` operator
sum(week1_sleep > 8)
## Create a matrix from the following three vectors
student01 <- c(100.0, 87.1)
student02 <- c(77.2, 88.9)
student03 <- c(66.3, 87.9)
students_combined <- c(student01, student02, student03)
students_combined
grades <- matrix(students_combined, byrow = TRUE, nrow = 3)
grades
## Add a new student row with `rbind()`
student04 <- c(95.2, 94.1)
grades <- rbind(grades, c(student04))
grades
## Add a new assignment column with `cbind()`
assignment04 <- c(92.1, 84.3, 75.1, 97.8)
grades <- cbind(grades, c(assignment04))
grades
## Add the following names to columns and rows using `rownames()` and `colnames()`
assignments <- c("Assignment 1", "Assignment 2", "Assignment 3")
students <- c("Florinda Baird", "Jinny Foss", "Lou Purvis", "Nola Maloney")
rownames(grades) <- students
colnames(grades) <- assignments
grades
## Total points for each assignment using `colSums()`
colSums(grades)
## Total points for each student using `rowSums()`
rowSums(grades)
## Matrix with 10% and add it to grades
weighted_grades <- grades * 0.1 + grades
## Create a factor of book genres using the genres_vector
## Assign the factor vector to factor_genre_vector
genres_vector <- c("Fantasy", "Sci-Fi", "Sci-Fi", "Mystery", "Sci-Fi", "Fantasy")
factor_genre_vector <- factor(genres_vector)
factor_genre_vector
## Use the `summary()` function to print a summary of `factor_genre_vector`
summary(factor_genre_vector)
## Create ordered factor of book recommendations using the recommendations_vector
## `no` is the lowest and `yes` is the highest
recommendations_vector <- c("neutral", "no", "no", "neutral", "yes")
factor_recommendations_vector <- factor(
recommendations_vector,
ordered = TRUE,
levels = c("no", "neutral", "yes")
)
## Use the `summary()` function to print a summary of `factor_recommendations_vector`
summary(factor_recommendations_vector)
## Using the built-in `mtcars` dataset, view the first few rows using the `head()` function
head(mtcars)
## Using the built-in mtcars dataset, view the last few rows using the `tail()` function
tail(mtcars)
## Create a dataframe called characters_df using the following information from LOTR
name <- c("Aragon", "Bilbo", "Frodo", "Galadriel", "Sam", "Gandalf", "Legolas", "Sauron", "Gollum")
race <- c("Men", "Hobbit", "Hobbit", "Elf", "Hobbit", "Maia", "Elf", "Maia", "Hobbit")
in_fellowship <- c(TRUE, FALSE, TRUE, FALSE, TRUE, TRUE, TRUE, FALSE, FALSE)
ring_bearer <- c(FALSE, TRUE, TRUE, FALSE, TRUE, TRUE, FALSE, TRUE, TRUE)
age <- c(88, 129, 51, 7000, 36, 2019, 2931, 7052, 589)
characters_df <- data.frame(name, race, in_fellowship, ring_bearer, age)
## Sorting the characters_df by age using the order function and assign the result to the sorted_characters_df
sorted_characters_df <- characters_df[order(age),]
## Use `head()` to output the first few rows of `sorted_characters_df`
head(sorted_characters_df)
## Select all of the ring bearers from the dataframe and assign it to ringbearers_df
ringbearers_df <- characters_df[characters_df$ring_bearer == TRUE,]
## Use `head()` to output the first few rows of `ringbearers_df`
head(ringbearers_df)
beds_df <-
r_squared <- r^2
beds_df
num_beds <- c(23,29,29,35,42,46,50,54,64,66,67,68)
ftes <- c(69,95,102,119,126,125,139,178,156,185,176,225)
beds_df <- data.frame(num_beds,ftes)
beds_df
num_beds <- c(23,29,29,35,42,46,50,54,64,66,67,68)
ftes <- c(69,95,102,119,126,125,139,178,156,185,176,225)
beds_df <- data.frame(num_beds,ftes)
r <- cor(beds_df)
r_squared <- r^2
r_squared
summary(beds_lm)$r.squared
num_beds <- c(23,29,29,35,42,46,50,54,64,66,67,68)
ftes <- c(69,95,102,119,126,125,139,178,156,185,176,225)
beds_df <- data.frame(num_beds,ftes)
beds_lm <- lm(ftes ~ num_beds, beds_df)
summary(beds_lm)$r.squared
r <- cor(beds_df)
r_squared <- r^2
r_squared
num_beds <- c(23,29,29,35,42,46,50,54,64,66,67,68)
ftes <- c(69,95,102,119,126,125,139,178,156,185,176,225)
beds_df <- data.frame(num_beds,ftes)
beds_lm <- lm(ftes ~ num_beds, beds_df)
summary(beds_lm)$r.squared
summary(beds_lm)
num_beds <- c(23,29,29,35,42,46,50,54,64,66,67,68)
ftes <- c(69,95,102,119,126,125,139,178,156,185,176,225)
beds_df <- data.frame(num_beds,ftes)
beds_lm <- lm(num_beds ~ ftes, beds_df)
summary(beds_lm)$r.squared
summary(beds_lm)
num_beds <- c(23,29,29,35,42,46,50,54,64,66,67,78)
ftes <- c(69,95,102,118,126,125,138,178,156,184,176,225)
beds_df <- data.frame(num_beds,ftes)
beds_lm <- lm(ftes ~ num_beds, beds_df)
summary(beds_lm)$r.squared
summary(beds_lm)
num_beds <- c(23,29,29,35,42,46,50,54,64,66,67,78)
ftes <- c(69,95,102,118,126,125,138,178,156,184,176,225)
beds_df <- data.frame(num_beds,ftes)
beds_lm <- lm(ftes ~ num_beds, beds_df)
summary(beds_lm)$r.squared
# Load the data
setwd('Users/isabellasturm/Documents/DataScience/DSC520Winter2020/ChessFinal/')
# Load the data
setwd('/Users/isabellasturm/Documents/DataScience/DSC520Winter2020/ChessFinal/')
chess_df <- read.csv('games.csv')
summary(chess_df)
# Load the data
setwd('/Users/isabellasturm/Documents/DataScience/DSC520Winter2020/ChessFinal/')
full_chess_df <- read.csv('games.csv')
# Clean the data
# Remove unneeded columns
chess_df <- subset(full_chess_df, select(id, created_at, last_move_at, turns,
victory_status, winner, white_rating,
black_rating, moves, opening_eco,
opening_name, opening_ply))
# Clean the data
# Remove unneeded columns
chess_df <- subset(full_chess_df, select=c(id, created_at, last_move_at, turns,
victory_status, winner, white_rating,
black_rating, moves, opening_eco,
opening_name, opening_ply))
# Set factors: victory_status, winner
chess_df$victory_status <- as.factor(chess_df$victory_status)
chess_df$winner <- as.factor(chess_df$winner)
# Set dates: created_at, last_move_at
chess_df$created_at <- as.Date(chess_df$created_at)
# Set dates: created_at, last_move_at
chess_df$created_at <- as.Date.numeric(chess_df$created_at)
# Set dates: created_at, last_move_at
chess_df$created_at <- as.Date.numeric(chess_df$created_at, origin='1970-01-01')
chess_df$last_move_at<- as.Date.numeric(chess_df$last_move_at, origin = '1970-01-01')
# Create new column: game_length
chess_df$game_length <- datediff(chess_df$last_move_at, chess_df$created_at)
# Create new column: game_length
chess_df$game_length <- difftime(chess_df$last_move_at, chess_df$created_at)
summary(chess_df)
hist(chess_df$winner)
hist(chess_df$winner.asnumeric)
chess_df$winner <- as.numeric(chess_df$winner)
# Set dates: created_at, last_move_at
chess_df$created_at <- as.Date.numeric(chess_df$created_at, origin='1970-01-01')
# Set dates: created_at, last_move_at
chess_df$created_at <- as.Date.numeric(chess_df$created_at, origin='1970-01-01')
full_chess_df <- read.csv('games.csv')
# Clean the data
# Remove unneeded columns
chess_df <- subset(full_chess_df, select=c(id, created_at, last_move_at, turns,
victory_status, winner, white_rating,
black_rating, moves, opening_eco,
opening_name, opening_ply))
# Set factors: victory_status
chess_df$victory_status <- as.factor(chess_df$victory_status)
chess_df$winner <- as.numeric(chess_df$winner)
chess_df$winner
# Set winner to numeric: white = 1, black = 0, draw = -1
chess_df$winner[chess_df$winner == 'white'] <- 1
chess_df$winner[chess_df$winner == 'black'] <- 0
chess_df$winner[chess_df$winner == 'draw'] <- -1
# Set dates: created_at, last_move_at
chess_df$created_at <- as.Date.numeric(chess_df$created_at, origin='1970-01-01')
chess_df$last_move_at<- as.Date.numeric(chess_df$last_move_at, origin = '1970-01-01')
# Create new column: game_length
chess_df$game_length <- difftime(chess_df$last_move_at, chess_df$created_at)
# Get data summary
summary(chess_df)
hist(chess_df$winner.asnumeric)
hist(chess_df$winner)
chess_df$winner
full_chess_df <- read.csv('games.csv')
# Clean the data
# Remove unneeded columns
chess_df <- subset(full_chess_df, select=c(id, created_at, last_move_at, turns,
victory_status, winner, white_rating,
black_rating, moves, opening_eco,
opening_name, opening_ply))
# Set factors: victory_status
chess_df$victory_status <- as.factor(chess_df$victory_status)
chess_df$winner
chess_df$winner[chess_df$winner == "white"]
chess_df$winner[chess_df$winner == 'white']
# Set winner to numeric: white = 1, black = 0, draw = -1
chess_df$winner[chess_df$winner == "white"] <- 1
chess_df$winner[chess_df$winner == 'black'] <- 0
chess_df$winner[chess_df$winner == 'draw'] <- -1
chess_df$winner
# Set dates: created_at, last_move_at
chess_df$created_at <- as.Date.numeric(chess_df$created_at, origin='1970-01-01')
# Set winner to numeric: white = 1, black = 0, draw = -1
chess_df$winner[chess_df$winner == "white"] <- 1
full_chess_df <- read.csv('games.csv')
# Clean the data
# Remove unneeded columns
chess_df <- subset(full_chess_df, select=c(id, created_at, last_move_at, turns,
victory_status, winner, white_rating,
black_rating, moves, opening_eco,
opening_name, opening_ply))
# Set factors: victory_status
chess_df$victory_status <- as.factor(chess_df$victory_status)
# Set winner to numeric: white = 1, black = 0, draw = -1
chess_df$winner[chess_df$winner == "white"] <- 1
chess_df$winner[chess_df$winner == 'black'] <- 0
chess_df$winner[chess_df$winner == 'draw'] <- -1
# Set dates: created_at, last_move_at
chess_df$created_at <- as.Date.numeric(chess_df$created_at, origin='1970-01-01')
chess_df$last_move_at<- as.Date.numeric(chess_df$last_move_at, origin = '1970-01-01')
# Create new column: game_length
chess_df$game_length <- difftime(chess_df$last_move_at, chess_df$created_at)
# Get data summary
summary(chess_df)
hist(chess_df$winner)
chess_df$winner
chess_df$winner.isnumeric
is.numeric(chess_df$winner)
class(chess_df$winner)
full_chess_df <- read.csv('games.csv')
# Clean the data
# Remove unneeded columns
chess_df <- subset(full_chess_df, select=c(id, created_at, last_move_at, turns,
victory_status, winner, white_rating,
black_rating, moves, opening_eco,
opening_name, opening_ply))
# Set factors: victory_status
chess_df$victory_status <- as.factor(chess_df$victory_status)
# Set winner to numeric: white = 1, black = 0, draw = -1
chess_df$winner[chess_df$winner == "white"] <- as.numeric(1)
chess_df$winner[chess_df$winner == 'black'] <- as.numeric(0)
chess_df$winner[chess_df$winner == 'draw'] <- as.numeric(-1)
# Set dates: created_at, last_move_at
chess_df$created_at <- as.Date.numeric(chess_df$created_at, origin='1970-01-01')
chess_df$last_move_at<- as.Date.numeric(chess_df$last_move_at, origin = '1970-01-01')
# Create new column: game_length
chess_df$game_length <- difftime(chess_df$last_move_at, chess_df$created_at)
# Get data summary
summary(chess_df)
class(chess_df$winner)
chess_df$winner <- as.numeric(chess_df$winner)
class(chess_df$winner)
hist(chess_df$winner)
# Load libraries
library(ggplot2)
ggplot(chess_df, aes(game_length, winner))
chess_df$game_length
# Create new column: game_length
chess_df$game_length <- difftime(chess_df$last_move_at, chess_df$created_at, unit="secs")
chess_df$game_length
chess_df$created_at
chess_df$rating_diff <- chess_df$white_rating - chess_df$black_rating # negative if black is rated higher
# Get data summary
summary(chess_df)
hist(chess_df$winner)
ggplot(chess_df, aes(rating_diff)) + geom_point(chess_df$winner)
ggplot(chess_df, aes(rating_diff)) + geom_point(chess_df, aes(rating_diff, winner))
ggplot(chess_df, aes(rating_diff, winner)
ggplot(chess_df, aes(rating_diff, winner))
ggplot(chess_df, aes(rating_diff, winner))
# Get data summary
summary(chess_df)
# Get data summary
summary(chess_df)
# Set factors: victory_status
chess_df$victory_status <- as.factor(chess_df$victory_status)
# Set winner to numeric: white = 1, black = 0, draw = -1
chess_df$winner_num[chess_df$winner == "white"] <- 1
chess_df$winner_num[chess_df$winner == 'black'] <- 0
chess_df$winner_num[chess_df$winner == 'draw'] <- -1
chess_df$winner_num <- as.numeric(chess_df$winner_num)
# Set dates: created_at, last_move_at
chess_df$created_at <- as.Date.numeric(chess_df$created_at, origin='1970-01-01')
chess_df$last_move_at<- as.Date.numeric(chess_df$last_move_at, origin = '1970-01-01')
# Create new column: game_length, rating_diff
chess_df$game_length <- difftime(chess_df$last_move_at, chess_df$created_at, unit="secs")
chess_df$rating_diff <- chess_df$white_rating - chess_df$black_rating # negative if black is rated higher
# Get data summary
summary(chess_df)
full_chess_df <- read.csv('games.csv')
# Clean the data
# Remove unneeded columns
chess_df <- subset(full_chess_df, select=c(id, created_at, last_move_at, turns,
victory_status, winner, white_rating,
black_rating, moves, opening_eco,
opening_name, opening_ply))
# Set factors: victory_status
chess_df$victory_status <- as.factor(chess_df$victory_status)
# Set winner to numeric: white = 1, black = 0, draw = -1
chess_df$winner_num[chess_df$winner == "white"] <- 1
chess_df$winner_num[chess_df$winner == 'black'] <- 0
chess_df$winner_num[chess_df$winner == 'draw'] <- -1
chess_df$winner_num <- as.numeric(chess_df$winner_num)
# Set dates: created_at, last_move_at
chess_df$created_at <- as.Date.numeric(chess_df$created_at, origin='1970-01-01')
chess_df$last_move_at<- as.Date.numeric(chess_df$last_move_at, origin = '1970-01-01')
# Create new column: game_length, rating_diff
chess_df$game_length <- difftime(chess_df$last_move_at, chess_df$created_at, unit="secs")
chess_df$rating_diff <- chess_df$white_rating - chess_df$black_rating # negative if black is rated higher
# Get data summary
summary(chess_df)
hist(chess_df$winner_num)
sd(chess_df)
ggplot(data=chess_df,
aes(x=rating_diff, y=winner_num, color=factor(victory_status))) +
geom_point()
chess_df$winner <- as.factor(chess_df$winner)
ggplot(data=chess_df,
aes(x=rating_diff, y=count(winner_num), color=fvictory_status))) +
geom_point()
ggplot(data=chess_df,
aes(x=rating_diff, y=count(winner_num), color=factor(victory_status))) +
geom_point()
win_counts =table(chess_df$winner[chess_df$winner == 'white'],
chess_df$winner[chess_df$winner == 'black'],
chess_df$winner[chess_df$winner == 'draw'])
win_counts =table(chess_df$winner, chess_df$rating_diff)
barplot(win_counts)
white_win_counts = table(chess_df$winner[chess_df$winner=='white'], chess_df$rating_diff[chess_df$winner=='white'])
black_win_counts = table(chess_df$winner[chess_df$winner=='black'], chess_df$rating_diff[chess_df$winner=='black'])
draw_win_counts = table(chess_df$winner[chess_df$winner=='draw'], chess_df$rating_diff[chess_df$winner=='draw'])
barplot(white_win_counts)
barplot(black_win_counts)
barplot(draw_win_counts)
win_counts = table(chess_df$winner, rating_diff)
win_counts = table(chess_df$winner, chess_df$rating_diff)
barplot(win_counts, main="Distribution of Wins based on Rating Difference",
xlab="Difference in Player Rating", col=c("blue", "red", "black"),
legend=rownames(win_counts))
white_win_counts = table(chess_df$winner[chess_df$winner=='white'], chess_df$rating_diff[chess_df$winner=='white'])
black_win_counts = table(chess_df$winner[chess_df$winner=='black'], chess_df$rating_diff[chess_df$winner=='black'])
draw_win_counts = table(chess_df$winner[chess_df$winner=='draw'], chess_df$rating_diff[chess_df$winner=='draw'])
barplot(white_win_counts)
barplot(black_win_counts)
barplot(draw_win_counts)
win_counts = table(chess_df$winner, chess_df$rating_diff)
barplot(win_counts, main="Distribution of Wins based on Rating Difference",
xlab="Difference in Player Rating", col=c("blue", "red", "black"),
legend=rownames(win_counts))
barplot(win_counts, main="Distribution of Wins based on Rating Difference",
xlab="Difference in Player Rating", col=c("blue", "black", "red"),
legend=rownames(win_counts))
barplot(win_counts, main="Distribution of Wins based on Rating Difference",
xlab="Difference in Player Rating", col=c("blue", "black", "red"),
legend=rownames(win_counts), besides=TRUE)
hist(chess_df$winner_num, xlim=(-1,0,1))
hist(chess_df$winner_num, xlim=(-1,1))
hist(chess_df$winner_num, xlim=c(-1,1))
hist(chess_df$winner_num, xlim=c(-1,0,1))
axis(side=1, at(-1,0,1))
hist(chess_df$winner_num, x=c(-1,1))
axis(side=1, at(-1,0,1))
hist(chess_df$winner_num, xlim=c(-1,1))
axis(side=1, at(-1,0,1))
set.seed=1
hist(chess_df$winner_num, xlim=c(-1,1))
hist(chess_df$winner_num, breaks=(seq(-1,0,1))
hist(chess_df$winner_num, breaks=seq(-1,0,1))
white_win_counts = table(chess_df$winner[chess_df$winner=='white'], chess_df$rating_diff[chess_df$winner=='white'])
# Get data summary
summary(chess_df)
hist(chess_df$winner_num, breaks=seq(-1,0,1))
hist(chess_df$winner_num, breaks=seq(-1.0,0.0,1.0))
hist(chess_df$winner_num, breaks=seq(-1,1,1))
hist(chess_df$winner_num, breaks=seq(-1,1,0))
hist(chess_df$winner_num)
win_counts = table(chess_df$winner, chess_df$rating_diff)
barplot(win_counts, main="Distribution of Wins based on Rating Difference",
xlab="Difference in Player Rating", col=c("blue", "black", "red"),
legend=rownames(win_counts))
ggplot(data=chess_df, aes(x=rating_diff, y=turns) +
geom_point())
ggplot(data=chess_df, aes(x=rating_diff, y=turns)) +
geom_point()
ggplot(data=chess_df, aes(x=rating_diff, y=turns, color=factor(victory_status))) +
geom_point()
hist(chess_df$victory_status)
hist(numeric(chess_df$victory_status))
hist(chess_df$victory_status.numeric(16))
ggplot(data=chess_df, aes(x=rating_diff, y=turns, color=factor(winner))) +
geom_point()
ggplot(data=chess_df, aes(x=rating_diff, y=turns, color=factor(winner))) +
geom_point(alpha=0.2)
ggplot(data=chess_df, aes(x=rating_diff, y=turns, color=factor(winner))) +
geom_point(alpha=0.7)
ggplot(data=chess_df, aes(x=rating_diff, y=turns, color=factor(winner))) +
geom_point(alpha=0.5)
ggplot(data=chess_df, aes(x=rating_diff, y=turns, color=factor(victory_status))) +
geom_point(alpha=0.5)
hist(chess_df$winner_num)
hist(chess_df$winner_num, breaks=3)
hist(chess_df$winner_num, breaks=2)
hist(chess_df$winner_num, breaks=4)
hist(chess_df$winner_num, breaks=3)
barplot(white_win_counts)
barplot(black_win_counts)
barplot(draw_win_counts)
win_counts = table(chess_df$winner, chess_df$rating_diff)
barplot(win_counts, main="Distribution of Wins based on Rating Difference",
xlab="Difference in Player Rating", col=c("blue", "black", "red"),
legend=rownames(win_counts), besides=TRUE)
barplot(chess_df$winner,
main="Number of Wins by Player",
xlab="Number of Wins",
ylab="Player",
names.args=c("white", "black", "draw"))
win_counts = table(table(chess_df$winner), chess_df$rating_diff)
barplot(table(chess_df$winner),
main="Number of Wins by Player",
xlab="Number of Wins",
ylab="Player",
names.args=c("white", "black", "draw"))
legend("topleft",
c("white","black","draw"),
fill=c("red","blue","green"))
barplot(chess_df,
main="Chess Game Outcomes",
xlab="Outcome",
col=c("red","blue","green"))
barplot(table(chess_df),
main="Chess Game Outcomes",
xlab="Outcome",
col=c("red","blue","green"))
legend("topleft",
c("white","black","draw"),
fill=c("red","blue","green"))
barplot(table(chess_df),
main="Chess Game Outcomes",
xlab="Outcome",
col=c("red","blue","green"))
legend("topleft",
c("white","black","draw"),
fill=c("red","blue","green"))
ggplot(data=chess_df, aes(x=winner, y=rating_diff)) +
geom_point(alpha=0.5)
ggplot(data=chess_df, aes(x=winner, y=rating_diff)) +
geom_point(alpha=0.5)
chess_df.mean()
chess_df$moves.mean()
mean(chess_df)
mean(chess_df$black_rating)
mean(chess_df$white_rating)
median(chess_df$white_rating)
median(chess_df$black_rating)
hist(chess_df$white_rating)
hist(chess_df$black_rating)
# Find correlation between game length and game duration
cor(data=chess_df, x=rating_diff, y=winner_num)
